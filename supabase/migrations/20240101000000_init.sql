-- Remover trigger e função existentes
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists public.handle_new_user();

-- Remover tabelas existentes
drop table if exists links;
drop table if exists profiles;

-- Create profiles table
create table profiles (
  id uuid references auth.users on delete cascade primary key,
  email text unique not null,
  full_name text,
  avatar_url text,
  role text not null default 'user' check (role in ('admin', 'user')),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create RLS policies
alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( auth.uid() = id );

create policy "Users can update own profile."
  on profiles for update
  using ( auth.uid() = id );

-- Set up storage
insert into storage.buckets (id, name, public) values ('avatars', 'avatars', true)
ON CONFLICT (id) DO NOTHING;

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );

create policy "Anyone can update their own avatar."
  on storage.objects for update
  using ( bucket_id = 'avatars' );

-- Create links table with RLS
create table links (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  slug text unique not null,
  destination_url text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  advanced_type text CHECK (advanced_type IN ('expirable', 'selfDestruct', 'password')),
  expires_at timestamp with time zone,
  is_self_destruct boolean DEFAULT false,
  password text,
  is_destroyed boolean DEFAULT false
);

alter table links enable row level security;

create policy "Links are viewable by everyone."
  on links for select
  using ( true );

create policy "Authenticated users can create links."
  on links for insert
  with check ( auth.role() = 'authenticated' );

create policy "Users can update own links."
  on links for update
  using ( auth.uid() = user_id );

create policy "Users can delete own links."
  on links for delete
  using ( auth.uid() = user_id );

-- Create function to handle user creation
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, role)
  values (new.id, new.email, 
    case 
      when new.email = 'genilsonferreiranegocios@gmail.com' then 'admin'
      else 'user'
    end
  );
  return new;
end;
$$ language plpgsql security definer;

-- Create trigger for new user creation
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user(); 